<pre class="metadata">
Title: Async Local Storage
Shortname: als
Repository: domenic/async-local-storage
Inline Github Issues: true
Status: DREAM
Boilerplate: omit conformance, omit feedback-header
Editor: Domenic Denicola, Google https://www.google.com/, d@domenic.me, https://domenic.me/
Abstract: This specification details a layered API for an asynchronous key value store, in the style of the original <span class="non-normative">{{Window/localStorage}}</span>.
!Participate: <a href="https://github.com/domenic/async-local-storage">GitHub domenic/async-local-storage</a> (<a href="https://github.com/domenic/async-local-storage/issues/new">new issue</a>, <a href="https://github.com/domenic/async-local-storage/issues?state=open">open issues</a>)
!Commits: <a href="https://github.com/domenic/async-local-storage/commits/master/spec.bs">GitHub spec.bs commits</a>
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
Default Biblio Status: current
</pre>

<pre class="anchors">
url: https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage; type: attribute; text: localStorage; for: Window; spec: HTML

urlPrefix: https://github.com/drufball/layered-apis/blob/master/spec.md/#user-content; type: dfn; spec: LAPI-SPEC; for: LAPI
  text: API identifier
  text: exports
  text: evaluation steps

urlPrefix: https://tc39.github.io/ecma262/#; spec: ECMASCRIPT
  text: Map; url: sec-map-objects; type: interface
  text: WeakMap; url: sec-weakmap-objects; type: interface
  text: Date; url: sec-date-objects; type: interface
  text: ToString; url: sec-tostring; type: abstract-op
  text: %ObjectPrototype%; url: sec-properties-of-the-object-prototype-object; type: interface
  text: CreateDataProperty; url: sec-createdataproperty; type: abstract-op
  text: ObjectCreate; url: sec-objectcreate; type: abstract-op
  text: Construct; url: sec-construct; type: abstract-op
  text: Type; url: sec-ecmascript-data-types-and-values; type: abstract-op
  text: IsArray; url: sec-isarray; type: abstract-op
  text: current Realm; url: current-realm; type: dfn
  text: typed array; url: sec-typedarray-objects; type: dfn

urlPrefix: https://tc39.github.io/Function-prototype-toString-revision/#; spec: FN-TOSTRING
  text: HostHasSourceTextAvailable; url: proposal-sec-hosthassourcetextavailable; type: abstract-op

urlPrefix: https://w3c.github.io/IndexedDB/; spec: INDEXEDDB-2; type: dfn
  text: convert a value to a key
  text: convert a key to a value
  text: close a database connection
  text: result; for: request
  text: error; for: request
  text: error; for: transaction
  text: transaction; url: #transaction-concept
  text: ascending; for: key; url: #greater-than
</pre>

<pre class="link-defaults">
  spec: promises-guide; type: dfn; text: resolve
  spec: infra; type: dfn; text: list
</pre>

<pre class="biblio">
{
  "LAPI": {
    "authors": [
      "Domenic Denicola",
      "Dru Knox",
      "Ojan Vafai"
    ],
    "href": "https://github.com/drufball/layered-apis/blob/master/README.md",
    "title": "Layered APIs"
  },
  "LAPI-SPEC": {
    "authors": [
      "Domenic Denicola"
    ],
    "href": "https://github.com/drufball/layered-apis/blob/master/spec.md",
    "title": "Layered APIs Proto-spec"
  },
  "CLASS-FIELDS": {
    "authors": [
      "Daniel Ehrenberg",
      "Jeff Morrison"
    ],
    "href": "https://tc39.github.io/proposal-class-fields/",
    "title": "Public and private instance fields proposal"
  }
}
</pre>

<style>
.selected-text-file-an-issue {
  position: fixed;
  bottom: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.8);
  font-size: smaller;
  padding: 4px 10px;
  z-index: 4;
}

summary {
  cursor: pointer;
}

/* hide ugly stuff that is moved to the acks */
[data-fill-with="spec-metadata"] .editor {
  display: none;
}

[data-fill-with="copyright"] {
  display: none;
}

/* domintro from https://resources.whatwg.org/standard.css */
dl.domintro {
  position: relative;
  color: green;
  background: #DDFFDD;
  margin: 2.5em 0 2em 0;
  padding: 1.5em 1em 0.5em 2em;
}

dl.domintro dt, dl.domintro dt * {
  color: black;
  font-size: inherit;
}
dl.domintro dd {
  margin: 0.5em 0 1em 2em; padding: 0;
}
dl.domintro dd p {
  margin: 0.5em 0;
}
dl.domintro::before {
  content: 'For web developers (non-normative)';
  background: green;
  color: white;
  padding: 0.15em 0.25em;
  font-style: normal;
  position: absolute;
  top: -0.8em;
  left: -0.8em;
}
</style>

<script src="https://resources.whatwg.org/file-issue.js" async></script>


<h2 id="intro">Introduction</h2>

<div class="non-normative">

<em>This section is non-normative.</em>

The {{Window/localStorage}} API is widely used, and loved for its simplicity. However, its synchronous nature leads to <a href="https://hacks.mozilla.org/2012/03/there-is-no-simple-solution-for-local-storage/">terrible performance</a> and cross-window synchronization issues.

This specification proposes a new API, called async local storage, which is intended to provide an analogously simple interface, while being asynchronous. Along the way, it embraces some additional goals:

* <strong>Layer on top of Indexed Database.</strong> This both fulfills the mandate of layered APIs to build on top of existing platform features, and allows an upgrade path to full IndexedDB usage if a web developer outgrows the async local storage interface. [[INDEXEDDB-2]] [[LAPI]]

* <strong>Modernize the API surface.</strong> Modern key/value stores in the platform, such as the {{Cache}} or {{Headers}} APIs, have aligned around the operation names given by JavaScript's {{Map}}. We follow their example. As a bonus, this allows us to avoid the legacy [=named properties=] feature that the {{Storage}} interface uses.

* <strong>Support isolated storage areas.</strong> {{Window/localStorage}} requires careful namespacing of keys to use robustly in a multi-actor environment. Popular libraries meant to replace it, like <a href="https://localforage.github.io/localForage/">localForage</a>, have included a way to create new storage areas beyond the default one.

<div class="example" id="example-from-html-spec">
  A conversion of <a href="https://html.spec.whatwg.org/multipage/webstorage.html#introduction-15">the HTML Standard's <code>localStorage</code> example</a> to use async local storage might look like the following:

  <xmp highlight="html">
    <p>
      You have viewed this page
      <span id="count">an untold number of</span>
      time(s).
    </p>
    <script type="module">
      import { storage } from
        "std:async-local-storage|https://example.com/als-polyfill.mjs";

      (async () => {
        let pageLoadCount = await storage.get("pageLoadCount") || 0;
        ++pageLoadCount;

        document.querySelector("#count").textContent = pageLoadCount;

        await storage.set("pageLoadCount", pageLoadCount);
      })();
    </script>
  </xmp>

  As a side note, observe how, in contrast to the original example which performs up to five storage operations, our example only performs two. Also, it updates the UI as soon as possible, instead of delaying the UI update until we've set the new page load count.

  The async local storage API design can take some credit for this, as by forcing us to explicitly state our <code>await</code> points, it makes it more obvious that we're performing a potentially-expensive storage operation.
</div>

</div>


<h2 id="module">The <code>async-local-storage</code> layered API</h2>

<dl class="domintro non-normative" id="module-domintro">
  <dt><code>import * as |als| from "std:async-local-storage|https://example.com/als-polyfill.mjs"</code>
  <dd>
    <p>Imports the async local storage API, using the built-in implementation if it exists, or the implementation found at the fallback URL otherwise.

    <p>If the built-in implementation is not imported in a [=secure context=], the <code>import</code> statement will cause a "{{SecurityError}}" {{DOMException}}, as persistent storage is a powerful feature.
  </dd>

  <dt><code>|als|.[=std:async-local-storage/storage=]</code>
  <dd>
    <p>Returns the default storage area. It is a pre-constructed instance of the {{StorageArea}} class, meant to be a convenience similar to {{Window/localStorage}}.
  </dd>

  <dt><code>|als|.[=std:async-local-storage/StorageArea=]</code>
  <dd>
    <p>Returns the constructor for the {{StorageArea}} class, to allow the creation of isolated storage areas.
  </dd>
</dl>

This specification defines a new layered API, whose [=LAPI/API identifier=] is "<dfn><code>async-local-storage</code></dfn>" and whose [=LAPI/exports=] are the following:

: <dfn for="std:async-local-storage"><code>storage</code></dfn>
:: An instance of the {{StorageArea}} class, created as if by <a abstract-op>Construct</a>({{StorageArea}}, « "<code>default</code>" »).
: <dfn for="std:async-local-storage"><code>StorageArea</code></dfn>
:: The {{StorageArea}} class

<div class="example" id="example-importing">
  To get access to these exports, one could use the syntax shown <a href="#module-domintro">above</a>, or import them directly without the intermediate |als| variable:

  <xmp highlight="js">
    import { storage, StorageArea } from
      "std:async-local-storage|https://example.com/als-polyfill.mjs";
  </xmp>
</div>

The layered API's [=LAPI/evaluation steps=] are the following:

1. If the [=current settings object=] is not [$Is an environment settings object contextually secure?|contextually secure$], throw a "{{SecurityError}}" {{DOMException}}.

<div class="advisement">
  This specification currently fails to fulfill the mandate of layered APIs being built on top of existing web platform features in two ways:

  * By <a href="#fn-tostring-censorship">requiring censorship</a> of the output of <code>Function.prototype.toString()</code> for the functions produced. See <a href="https://github.com/drufball/layered-apis/issues/7">drufball/layered-apis#7</a>.
  * By directly invoking the algorithms of various IDL operations and attributes, instead of going through the global, potentially-overridable JavaScript APIs. (E.g., in various algorithm steps that say "performing the steps listed in the description of", or the [=allowed as a key=] algorithm which uses <a abstract-op>IsArray</a> directly instead of going through <code>Array.isArray()</code>.) See <a href="https://github.com/drufball/layered-apis/issues/6">drufball/layered-apis#6</a>.

  We hope we can resolve this conflict; please refer to the above-linked issue threads for more discussion.
</div>


<h2 id="storagearea" interface lt="StorageArea">The <code>StorageArea</code> class</h2>

Upon evaluating the <a><code>async-local-storage</code></a> layered API module, the {{StorageArea}} class must be created in the [=current Realm=]. The result must be equivalent to evaluating the following JavaScript code, with the following two exceptions:

<ul>
  <li><p>The constructor, method, and getter bodies must behave as specified below instead of being the no-ops shown in this code block.</p></li>
  <li id="fn-tostring-censorship"><p><a abstract-op>HostHasSourceTextAvailable</a> must return false for all function objects (i.e. the constructor, methods, and getter) created.</p></li>
</ul>

<pre highlight="js">
  class StorageArea {
    constructor(name)  { /* <a href="#storagearea-constructor">see below</a> */ }

    set(key, value)    { /* <a href="#storagearea-set">see below</a> */ }
    get(key)           { /* <a href="#storagearea-get">see below</a> */ }
    has(key)           { /* <a href="#storagearea-has">see below</a> */ }
    delete(key)        { /* <a href="#storagearea-delete">see below</a> */ }
    clear()            { /* <a href="#storagearea-clear">see below</a> */ }

    keys()             { /* <a href="#storagearea-keys">see below</a> */ }
    values()           { /* <a href="#storagearea-values">see below</a> */ }
    entries()          { /* <a href="#storagearea-entries">see below</a> */ }

    get backingStore() { /* <a href="#storagearea-backingstore">see below</a> */ }
  }
</pre>

<div class="note" id="class-definition-explanation">
  <p>The intention of defining the {{StorageArea}} class in this way, using a skeleton JavaScript class definition, is to automatically establish the various properties of the class, its methods, and its getter, which otherwise need to be specified in tedious detail. For example, this automatically establishes the <code>length</code> and <code>name</code> properties of all these functions, their property descriptors, their <code>prototype</code> and <code>constructor</code> properties, etc. And it does so in a way that is consistent with what a JavaScript developer would expect.

  <details>
    <summary>Why not use Web IDL?</summary>

    Apart from the above novel technique, there are two commonly-seen alternatives for defining JavaScript classes. The JavaScript specification, as well as the Streams Standard, defer to the "<a href="https://tc39.github.io/ecma262/#sec-ecmascript-standard-built-in-objects">ECMAScript Standard Built-in Objects</a>" section of the JavaScript specification, which defines many defaults. The more popular alternative, however, is to use Web IDL. Why aren't we using that?

    Web IDL has a few minor mismatches with our goals for layered APIs:

    * Its automatically-generated brand checks are both unforgeable and cross-realm, which is not accomplishable in JavaScript. [=StorageArea/brand check|Our brand checks=] are same-realm-only.

    * It does not have a mechanism for exposing classes inside modules; instead they are always exposed on some set of global objects.

    * It produces methods and accessors that are enumerable, which does not match the natural JavaScript implementation. This would make it more difficult to implement a Web IDL-specified layered API in JavaScript. (But not impossible.)

    * The generic nature of Web IDL means that it is best implemented using code generation. However, most implementers currently do not have a Web IDL bindings generator that wraps JavaScript; using Web IDL would virtually require them to either implement the layered API in C++, or create such a bindings generator. Furthermore, the wrappers end up being quite large; see <a href="https://gist.github.com/domenic/b5c395e036781173e123">an example</a>. <!-- TODO: maybe make an actual generated StorageArea example -->

    None of these mismatches are fatal. We could switch this specification to Web IDL, with appropriate extensions for solving the first two problems, if that ends up being desired. But for now, we're experimenting with this different—and more JavaScript-implementation-friendly—mechanism of specifying a class definition.
  </details>
</div>

Each {{StorageArea}} instance must also contain the following internal slots:

<table>
  <thead>
    <tr>
      <th>Internal Slot
      <th>Initial Value
      <th>Description (<em>non-normative</em>)
  </thead>
  <tr>
    <td>\[[DatabaseName]]
    <td>null
    <td>A string containing the name of the backing IndexedDB database
  <tr>
    <td>\[[DatabasePromise]]
    <td>null
    <td>A promise for an {{IDBDatabase}} object, lazily initialized when [=perform a database operation|performing any database operation=]
</table>

An object |obj| <dfn for="StorageArea">brand checks</dfn> as a {{StorageArea}} if |obj| has a \[[DatabaseName]] internal slot and |obj|'s [=relevant realm=] is equal to the [=current realm=].

<p class="note">The realm check here gives us semantics identical to using JavaScript's {{WeakMap}} or the proposed private class fields. This ensures {{StorageArea}} does not use any magic, like the platform's usual cross-realm brand checks, which go beyond what can be implemented in JavaScript. [[ECMA-262]] [[CLASS-FIELDS]]

<h3 id="storagearea-constructor" constructor for="StorageArea" lt="constructor(name)">constructor(|name|)</h3>

<dl class="domintro non-normative">
  <dt><code>|storage| = new {{StorageArea/constructor(name)|StorageArea}}(|name|)</code>
  <dd>
    <p>Creates a new {{StorageArea}} that provides an async key/value store view onto an IndexedDB database named <code>`async-local-storage:${name}`</code>.

    <p>This does not actually open or create the database yet; that is done lazily when other methods are called. This means that all other methods can reject with database-related exceptions in failure cases.
</dl>

<div class="algorithm">
  1. Let |area| be this {{StorageArea}} object.
  1. Set |area|'s internal slots to the initial values indicated in [[#storagearea]].
  1. Let |nameString| be <a abstract-op>ToString</a>(|name|).
  1. Set |area|.\[[DatabaseName]] to the concatenation of "<code>async-local-storage:</code>" and |nameString|.
</div>

<h3 id="storagearea-set" method for="StorageArea">set(|key|, |value|)</h3>

<dl class="domintro non-normative">
  <dt><code>await |storage|.{{StorageArea/set()|set}}(|key|, |value|)</code>
  <dd>
    <p>Asynchronously stores the given |value| so that it can later be retrieved by the given |key|.

    <p>Keys have to follow the same restrictions as IndexedDB keys: roughly, a key can be a number, string, array, {{Date}}, {{ArrayBuffer}}, {{DataView}}, [=typed array=], or an array of these. Invalid keys will cause the returned promise to reject with a "{{DataError}}" {{DOMException}}.

    <p>Values can be any value that can be [$StructuredSerializeForStorage|structured-serialized for storage$]. Un-serializable values will cause a "{{DataCloneError}}" {{DOMException}}.

    <p>The returned promise will fulfill with undefined on success.
</dl>

<div class="algorithm">
  1. If |key| is not [=allowed as a key=], return [=a promise rejected with=] a "{{DataError}}" {{DOMException}}.
  1. Return the result of [=performing a database operation=] given this object, "<code>readwrite</code>", and the following steps operating on |transaction| and |store|:
    1. Perform the steps listed in the description of {{IDBObjectStore}}'s {{IDBObjectStore/put()}} method on |store|, given the arguments |value| and |key|.
    1. Let |promise| be [=a new promise=].
    1. [=Add a simple event listener=] to |transaction| for "<code>complete</code>" that [=resolves=] |promise| with undefined.
    1. [=Add a simple event listener=] to |transaction| for "<code>error</code>" that [=rejects=] |promise| with |transaction|'s [=transaction/error=].
    1. [=Add a simple event listener=] to |transaction| for "<code>abort</code>" that [=rejects=] |promise| with |transaction|'s [=transaction/error=].
    1. Return |promise|.
</div>

<h3 id="storagearea-get" method for="StorageArea">get(|key|)</h3>

<dl class="domintro non-normative">
  <dt><code>|value| = await |storage|.{{StorageArea/get()|get}}(|key|)</code>
  <dd>
    <p>Asynchronously retrieves the value stored at the given |key|, or undefined if there is no value stored at |key|.

    <p>Values retrieved will be [$StructuredDeserialize|structured-deserialized$] from their original form.

    <p>Note: since you can store the value undefined, the fulfillment value of undefined is ambiguous between being not present and being present with the value undefined. If you need to distinguish these cases, you can use {{StorageArea/has()}}, but beware of the race conditions <a href="#example-has-race-conditions">noted there</a>.
</dl>

<div class="algorithm">
  1. If |key| is not [=allowed as a key=], return [=a promise rejected with=] a "{{DataError}}" {{DOMException}}.
  1. Return the result of [=performing a database operation=] given this object, "<code>readonly</code>", and the following steps operating on |transaction| and |store|:
    1. Let |request| be the result of performing the steps listed in the description of {{IDBObjectStore}}'s {{IDBObjectStore/get()}} method on |store|, given the argument |key|.
    1. Let |promise| be [=a new promise=].
    1. [=Add a simple event listener=] to |request| for "<code>success</code>" that [=resolves=] |promise| with |request|'s [=request/result=].
    1. [=Add a simple event listener=] to |request| for "<code>error</code>" that [=rejects=] |promise| with |request|'s [=request/error=].
    1. Return |promise|.
</div>

<h3 id="storagearea-has" method for="StorageArea">has(|key|)</h3>

<dl class="domintro non-normative">
  <dt><code><var ignore>isPresent</var> = await |storage|.{{StorageArea/has()|has}}(|key|)</code>
  <dd>
    <p>Asynchronously determines whether a value is stored at the given |key|, returning a promise fulfilled with either true or false.
</dl>

<div class="algorithm">
  1. If |key| is not [=allowed as a key=], return [=a promise rejected with=] a "{{DataError}}" {{DOMException}}.
  1. Return the result of [=performing a database operation=] given this object, "<code>readonly</code>", and the following steps operating on |transaction| and |store|:
    1. Let |request| be the result of performing the steps listed in the description of {{IDBObjectStore}}'s {{IDBObjectStore/count()}} method on |store|, given the argument |key|.
    1. Let |promise| be [=a new promise=].
    1. [=Add a simple event listener=] to |request| for "<code>success</code>" that [=resolves=] |promise| with false if |request|'s [=request/result=] is 0, and with true otherwise.
    1. [=Add a simple event listener=] to |request| for "<code>error</code>" that [=rejects=] |promise| with |request|'s [=request/error=].
    1. Return |promise|.
</div>

<div class="example" id="example-has-flag">
  {{StorageArea/has()}} is commonly used for storing "flags". The boolean condition of present/not-present is often simpler than actually storing a boolean.

  <xmp highlight="js">
    await storage.set("userIsHappyAndKnowsIt"); // second argument is implicitly undefined

    // ... later ...

    if (await storage.has("userIsHappyAndKnowsIt")) {
      clapTheirHands();
    }
  </xmp>
</div>

<div class="example" id="example-has-race-conditions">
  <strong>Warning!</strong> Using this method in combination with {{StorageArea/get()}} is generally a bad idea. For example, the following code might look correct, but it is actually prone to race conditions:

  <xmp highlight="js">
    if (await storage.has("my-key")) {
      const val = await storage.get("my-key");
      // ... use val
    }
  </xmp>

  The problem is that, because the {{StorageArea/has()}} call is asynchronous, the value stored at <code>"my-key"</code> might have been deleted between the {{StorageArea/has()}} promise fulfilling and the {{StorageArea/get()}} call being initiated.

  In this case, the code would be better written as

  <xmp highlight="js">
    const val = await storage.get("my-key");
    if (val !== undefined) {
      // ... use val
    }
  </xmp>

  We are discussing whether this points toward removing {{StorageArea/has()}}, and the distinction between present-with-value-undefined and not-present, in <a href="https://github.com/domenic/async-local-storage/issues/3">#3</a>.
</div>

<h3 id="storagearea-delete" method for="StorageArea">delete(|key|)</h3>

<dl class="domintro non-normative">
  <dt><code>await |storage|.{{StorageArea/delete()|delete}}(|key|)</code>
  <dd>
    <p>Asynchronously deletes the entry at the given |key|.

    <p>The returned promise will fulfill with undefined on success.
</dl>

<div class="algorithm">
  1. If |key| is not [=allowed as a key=], return [=a promise rejected with=] a "{{DataError}}" {{DOMException}}.
  1. Return the result of [=performing a database operation=] given this object, "<code>readwrite</code>", and the following steps operating on |transaction| and |store|:
    1. Perform the steps listed in the description of {{IDBObjectStore}}'s {{IDBObjectStore/delete()}} method on |store|, given the argument |key|.
    1. Let |promise| be [=a new promise=].
    1. [=Add a simple event listener=] to |transaction| for "<code>complete</code>" that [=resolves=] |promise| with undefined.
    1. [=Add a simple event listener=] to |transaction| for "<code>error</code>" that [=rejects=] |promise| with |transaction|'s [=transaction/error=].
    1. [=Add a simple event listener=] to |transaction| for "<code>abort</code>" that [=rejects=] |promise| with |transaction|'s [=transaction/error=].
    1. Return |promise|.
</div>

<h3 id="storagearea-clear" method for="StorageArea">clear()</h3>

<dl class="domintro non-normative">
  <dt><code>await |storage|.{{StorageArea/clear()|clear}}()</code>
  <dd>
    <p>Asynchronously deletes all entries in this storage area.

    <p>This is done by actually deleting the underlying IndexedDB database. As such, it always can be used as a fail-safe to get a clean slate, <a href="#clear-recover-from-changes">as shown below</a>.

    <p>The returned promise will fulfill with undefined on success.
</dl>

<div class="algorithm">
  1. Let |area| be this object.
  1. If |area| does not [=StorageArea/brand check=], return [=a promise rejected with=] a {{TypeError}} exception.
  1. If |area|.\[[DatabasePromise]] is not null, return the result of [=transforming=] |area|.\[[DatabasePromise]] by fulfillment and rejection handlers that both perform the following steps:
    1. Set |area|.\[[DatabasePromise]] to null.
    1. Return the result of [=deleting the database=] given by |area|.\[[DatabaseName]].
  1. Otherwise, return the result of [=deleting the database=] given by |area|.\[[DatabaseName]].
</div>

To <dfn lt="deleting the database|delete the database">delete the database</dfn> given a string |name|:

<div class="algorithm">
  1. Let |promise| be [=a new promise=].
  1. Let |request| be the result of performing the steps listed in the description of {{IDBFactory}}'s {{IDBFactory/deleteDatabase()}} method on the <a>current <code>IDBFactory</code></a>, given the argument |name|.
  1. If those steps threw an exception, catch the exception and [=reject=] |promise| with it.
  1. Otherwise:
    1. [=Add a simple event listener=] to |request| for "<code>success</code>" that [=resolves=] |promise| with undefined.
    1. [=Add a simple event listener=] to |request| for "<code>error</code>" that [=rejects=] |promise| with |request|'s [=request/error=].
  1. Return |promise|.
</div>

<div class="example" id="clear-recover-from-changes">
  This method can be used to recover from unexpected modifications to the backing store. For example,

  <xmp highlight="js">
    // This upgrade to version 100 breaks the "cats" storage area: since StorageAreas
    // assume a version of 1, "cats" can no longer be used with async local storage.
    const openRequest = indexedDB.open("async-local-storage:cats", 100);
    openRequest.onsuccess = () => {
      openRequest.onsuccess.close();
    };

    (async () => {
      const area = new StorageArea("cats");

      // Due to the above upgrade, all other methods will reject:
      try {
        await area.set("fluffy", new Cat());
      } catch (e) {
        // This will be reached and output a "VersionError" DOMException
        console.error(e);
      }

      // But clear() will delete the database entirely:
      await area.clear();

      // Now we can use it again!
      await area.set("fluffy", new Cat());
      await area.set("tigger", new Cat());
    })();
  </xmp>
</div>

<h3 id="storagearea-keys" method for="StorageArea">keys()</h3>

<dl class="domintro non-normative">
  <dt><code><var ignore>keys</var> = await |storage|.{{StorageArea/keys()|keys}}()</code>
  <dd>
    <p>Asynchronously retrieves an array containing the keys of all entries in this storage area.

    <p>Keys will be returned in [=key/ascending=] order; roughly, segregated by type, and then sorted within each type. They will be [=key round-tripped=] from their original form.
</dl>

<div class="algorithm">
  1. Return the result of [=performing a database operation=] given this object, "<code>readonly</code>", and the following steps operating on |transaction| and |store|:
    1. Let |request| be the result of performing the steps listed in the description of {{IDBObjectStore}}'s {{IDBObjectStore/getAllKeys()}} method on |store| given the argument undefined.
    1. Let |promise| be [=a new promise=].
    1. [=Add a simple event listener=] to |request| for "<code>success</code>" that [=resolves=] |promise| with |request|'s [=request/result=].
    1. [=Add a simple event listener=] to |request| for "<code>error</code>" that [=rejects=] |promise| with |request|'s [=request/error=].
    1. Return |promise|.
</div>

<h3 id="storagearea-values" method for="StorageArea">values()</h3>

<dl class="domintro non-normative">
  <dt><code><var ignore>values</var> = await |storage|.{{StorageArea/values()|values}}()</code>
  <dd>
    <p>Asynchronously retrieves an array containing the values of all entries in this storage area.

    <p>Values will be ordered as corresponding to their keys; see {{StorageArea/keys()}}. They will be [$StructuredDeserialize|structured-deserialized$] from their original form.
</dl>

<div class="algorithm">
  1. Return the result of [=performing a database operation=] given this object, "<code>readonly</code>", and the following steps operating on |transaction| and |store|:
    1. Let |request| be the result of performing the steps listed in the description of {{IDBObjectStore}}'s {{IDBObjectStore/getAll()}} method on |store| given the argument undefined.
    1. Let |promise| be [=a new promise=].
    1. [=Add a simple event listener=] to |request| for "<code>success</code>" that [=resolves=] |promise| with |request|'s [=request/result=].
    1. [=Add a simple event listener=] to |request| for "<code>error</code>" that [=rejects=] |promise| with |request|'s [=request/error=].
    1. Return |promise|.
</div>

<h3 id="storagearea-entries" method for="StorageArea">entries()</h3>

<dl class="domintro non-normative">
  <dt><code><var ignore>entries</var> = await |storage|.{{StorageArea/entries()|entries}}()</code>
  <dd>
    <p>Asynchronously retrieves an array of two-element <code>[key, value]</code> arrays, each of which corresponds to an entry in this storage area.

    <p>Entries will be ordered as corresponding to their keys; see {{StorageArea/keys()}}. Each key and value will be [=key round-tripped=] and [$StructuredDeserialize|structured-deserialized$] from its original form, respectively.
</dl>

<div class="algorithm">
  1. Return the result of [=performing a database operation=] given this object, "<code>readonly</code>", and the following steps operating on |transaction| and |store|:
    1. Let |keysRequest| be the result of performing the steps listed in the description of {{IDBObjectStore}}'s {{IDBObjectStore/getAllKeys()}} method on |store| given the argument undefined.
    1. Let |valuesRequest| be the result of performing the steps listed in the description of {{IDBObjectStore}}'s {{IDBObjectStore/getAll()}} method on |store| given the argument undefined.
    1. Let |promise| be [=a new promise=].
    1. [=Add a simple event listener=] to |keysRequest| for "<code>error</code>" that [=rejects=] |promise| with |request|'s [=request/error=].
    1. [=Add a simple event listener=] to |valuesRequest| for "<code>error</code>" that [=rejects=] |promise| with |request|'s [=request/error=].
    1. [=Add a simple event listener=] to |valuesRequest| for "<code>success</code>" that [=resolves=] |promise| with the result of [=zipping=] |keysRequest|'s [=request/result=] and |valuesRequest|'s [=request/result=].

       <p class="note">If |valuesRequest| succeeds, then |keysRequest| will have succeeded already.</p>
    1. Return |promise|.
</div>

<div class="example" id="example-entries-to-server">
  Assuming you knew that that you only stored JSON-compatible types in <code>[=storage=]</code>, you could use the following code to send all locally-stored entries to a server:

  <xmp highlight="js">
    const entries = JSON.stringify(await storage.entries());
    fetch("/storage-receiver", {
      method: "POST",
      body: entries,
      headers: {
        "Content-Type": "application/json"
      }
    });
  </xmp>
</div>

<h3 id="storagearea-backingstore" attribute for="StorageArea" lt="backingStore">get backingStore()</h3>

<dl class="domintro non-normative">
  <dt><code>{ |database|, |store|, |version| } = |storage|.{{StorageArea/backingStore}}</code>
  <dd>
    <p>Asynchronously retrieves an an object containing all of the information necessary to manually interface with the IndexedDB backing store that underlies this storage area:

    * |database| will be a string equal to "<code>async-local-storage:</code>" concatenated with the database name passed to the constructor. (For the default storage area, it will be "<code>async-local-storage:default</code>".)
    * |store| will be the string "<code>store</code>".
    * |version| will be the number 1.

    <p>It is good practice to use the {{StorageArea/backingStore}} property to retrieve this information, instead of memorizing the above factoids.
</dl>

<div class="algorithm">
  1. Let |area| be this object.
  1. If |area| does not [=StorageArea/brand check=], throw a {{TypeError}} exception.
  1. Let |info| be <a abstract-op>ObjectCreate</a>({{%ObjectPrototype%}}).
  1. Perform <a abstract-op>CreateDataProperty</a>(|info|, "<code>database</code>", |area|.\[[DatabaseName]]).
  1. Perform <a abstract-op>CreateDataProperty</a>(|info|, "<code>store</code>", "<code>store</code>").
  1. Perform <a abstract-op>CreateDataProperty</a>(|info|, "<code>version</code>", 1).
  1. Return |info|.
</div>

<div class="example" id="example-backingstore">
  Consider a checklist application, which tracks the Pokémon a user has collected. It might use <code>[=std:async-local-storage/storage=]</code> like so:

  <xmp highlight="js">
    bulbasaur.onchange = () => storage.set("bulbasaur", bulbasaur.checked);
    ivysaur.onchange = () => storage.set("ivysaur", ivysaur.checked);
    venusaur.onchange = () => storage.set("venusaur", venusaur.checked);
    // ...
  </xmp>

  (Hopefully the developer quickly realizes that the above will be hard to maintain, and refactors the code into a loop. But in the meantime, their repetitive code makes for a good example, so let's take advantage of that.)

  The developer now realizes they want to add an evolution feature, e.g. for when the user transforms their Bulbasaur into an Ivysaur. They might first implement this like so:

  <xmp highlight="js">
    bulbasaurEvolve.onclick = async () => {
      await storage.set("bulbasaur", false);
      await storage.set("ivysaur", true);
    };
  </xmp>

  However, our developer starts getting bug reports from their users: if the users happen to open up the checklist app in a second tab while they're evolving in the first tab, the second tab will sometimes see that their Bulbasaur has disappeared, without ever turning into an Ivysaur! A Pokémon has gone missing!

  The solution here is to step beyond the comfort zone of async local storage, and start using the full power of IndexedDB: in particular, its [=transactions=] feature. The {{StorageArea/backingStore}} getter is the gateway to this world:

  <xmp highlight="js">
    const { database, store, version } = storage.backingStore;
    const request = indexedDB.open(database, version);
    request.onsuccess = () => {
      const db = request.result;

      bulbasaurEvolve.onclick = () => {
        const transaction = db.transaction(store, "readwrite");
        const store = transaction.objectStore(store);

        store.put("bulbasaur", false);
        store.put("ivysaur", true);

        db.close();
      };
    };
  </xmp>

  Satisfied with their web app's Pokémon integrity, our developer is now happy and fulfilled. (At least, until they realize that none of their code has error handling.)
</div>

<h3 id="supporting">Supporting operations and concepts</h3>

To <dfn>add a simple event listener</dfn>, given an {{EventTarget}} |target|, an event type string |type|, and a set of steps |steps|:

<div class="algorithm">
  1. Let |jsCallback| be a new JavaScript function object, created in the [=current realm=], that performs the steps given by |steps|. Other properties of the function (such as its <code>name</code> and <code>length</code> properties, or \[[Prototype]]) are unobservable, and can be chosen arbitrarily.
  1. Let |idlCallback| be the result of [=converted to an IDL value|converting=] |jsCallback| to an {{EventListener}}.
  1. Perform the steps listed in the description of {{EventTarget}}'s {{EventTarget/addEventListener()}} method on |target| given the arguments |type| and |idlCallback|.
</div>

The <dfn>current <code>IDBFactory</code></dfn> is the {{IDBFactory}} instance returned by the following steps:

<div class="algorithm">
  1. Assert: the [=current global object=] [=includes=] {{WindowOrWorkerGlobalScope}}.
  1. Return the result of performing the steps listed in the description of the getter for {{WindowOrWorkerGlobalScope}}'s {{WindowOrWorkerGlobalScope/indexedDB}} attribute on the [=current global object=].
</div>

To <dfn lt="performing a database operation|perform a database operation">perform a database operation</dfn> given a {{StorageArea}} |area|, a mode string |mode|, and a set of steps |steps| that operate on an {{IDBTransaction}} |transaction| and an {{IDBObjectStore}} |store|:

<div class="algorithm">
  1. If |area| does not [=StorageArea/brand check=], return [=a promise rejected with=] a {{TypeError}} exception.
  1. Assert: |area|.\[[DatabaseName]] is a string (and in particular is not null).
  1. If |area|.\[[DatabasePromise]] is null, [=initialize the database promise=] for |area|.
  1. Return the result of [=transforming=] |area|.\[[DatabasePromise]] by a fulfillment handler that performs the following steps, given |database|:
    1. Let |transaction| be the result of performing the steps listed in the description of {{IDBDatabase}}'s {{IDBDatabase/transaction()}} method on |database|, given the arguments "<code>store</code>" and |mode|.
    1. Let |store| be the result of performing the steps listed in the description of {{IDBTransaction}}'s {{IDBTransaction/objectStore()}} method on |transaction|, given the argument "<code>store</code>".
    1. Return the result of performing |steps|, passing along |transaction| and |store|.
</div>

To <dfn>initialize the database promise</dfn> for a {{StorageArea}} |area|:

<div class="algorithm">
  1. Set |area|.\[[DatabasePromise]] to [=a new promise=].
  1. If the [=current global object=] does not [=include=] {{WindowOrWorkerGlobalScope}}, [=reject=] |area|.\[[DatabasePromise]] with a {{TypeError}}, and return.
  1. Let |request| be the result of performing the steps listed in the description of {{IDBFactory}}'s {{IDBFactory/open()}} method on the <a>current <code>IDBFactory</code></a>, given the arguments |area|.\[[DatabaseName]] and 1.
  1. If those steps threw an exception, catch the exception, [=reject=] |area|.\[[DatabasePromise]] with it, and return.
  1. [=Add a simple event listener=] to |request| for "<code>success</code>" that performs the following steps:
    1. Let |database| be |request|'s [=request/result=].
    1. [=Add a simple event listener=] to |database| for "<code>close</code>" that sets |area|.\[[DatabasePromise]] to null.
      <p class="note">This means that if the database is [=close a database connection|closed abnormally=], future invocations of [=perform a database operation=] will attempt to reopen it.</p>
    1. [=Add a simple event listener=] to |database| for "<code>versionchange</code>" that performs the steps listed in the description of {{IDBDatabase}}'s {{IDBDatabase/close()}} method on |database|, and then sets |area|.\[[DatabasePromise]] to null.
       <p class="note">This allows attempts to upgrade the underlying database, or to delete it (e.g. via the {{StorageArea/clear()}} method), to succeed. Without this, if two {{StorageArea}} instances were both open referencing the same underlying database, {{StorageArea/clear()}} would hang, as it only closes the connection maintained by the {{StorageArea}} it is invoked on.</p>
    1. [=Resolve=] |promise| with |database|.
  1. [=Add a simple event listener=] to |request| for "<code>error</code>" that [=rejects=] |promise| with |request|'s [=request/error=].
  1. [=Add a simple event listener=] to |request| for "<code>upgradeneeded</code>" that performs the following steps:
    1. Let |database| be |request|'s [=request/result=].
    1. Perform the steps listed in the description of {{IDBDatabase}}'s {{IDBDatabase/createObjectStore()}} method on |database|, given the arguments "<code>store</code>".
    1. If these steps throw an exception, catch the exception and [=reject=] |area|.\[[DatabasePromise]] with it.
</div>

A value |value| is <dfn>allowed as a key</dfn> if the following steps return true:

<div class="algorithm">
  1. If <a abstract-op>Type</a>(|value|) is Number or String, return true.
  1. If <a abstract-op>IsArray</a>(|value|) is true, return true.
  1. If |value| has a \[[DateValue]] internal slot, return true.
  1. If |value| has a \[[ViewedArrayBuffer]] internal slot, return true.
  1. If |value| has an \[[ArrayBufferByteLength]] internal slot, return true.
  1. Return false.
</div>

<div class="note">
  A value being [=allowed as a key=] means that it can at least plausibly be used as a key in the IndexedDB APIs. In particular, the values which are [=allowed as a key=] are a subset of those for which IndexedDB's [=convert a value to a key=] algorithm will succeed.

  Most notably, using the [=allowed as a key=] predicate ensures that {{IDBKeyRange}} objects, or any other special object that is accepted as a query in future IndexedDB specification revisions, will be disallowed. Only straightforward key values are accepted by the async local storage API.
</div>

To <dfn>zip</dfn> two [=lists=] |a| and |b|:

1. Assert: |a|'s [=list/size=] is equal to |b|'s [=list/size=].
1. Let |result| be a new [=list=].
1. Let |i| be 0.
1. While |i| is less than |a|'s [=list/size=]:
  1. [=list/Append=] « |a|[|i|], |b|[|i|] » to |result|.
1. Return |result|.

<dfn lt="key round-trip">Key round-tripping</dfn> refers to the way in which JavaScript values are processed by first being passed through IndexedDB's [=convert a value to a key=] operation, then converted back through its [=convert a key to a value=] operation. Keys returned by the {{StorageArea/keys()}} or {{StorageArea/entries()}} methods will have gone through this process.

Notably, any [=typed arrays=] or {{DataView}}s will have been "unwrapped", and returned back as just {{ArrayBuffer}}s containing the same bytes. Also, similar to the [$StructuredSerializeForStorage|structured-serialization$]/[$StructuredDeserialize|deserialization$] process, any "expando" properties or other modifications will not be preserved by [=key round-tripping=].

<p class="note">For primitive string or number values, there's no need to worry about [=key round-tripping=]; the values are indistinguishable.</p>

<h2 id="acks" class="no-num">Acknowledgments</h2>

The editor would like to thank
Joshua Bell
for their contributions to this specification.

This standard is written by <a href="https://domenic.me/">Domenic Denicola</a> (<a href="https://google.com">Google</a>, <a href="mailto:d@domenic.me">d@domenic.me</a>).

Per <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to the extent possible under law, the editor has waived all copyright and related or neighboring rights to this work.

<h2 id="conformance" class="no-num">Conformance</h2>

This specification depends on the Infra Standard. [[!INFRA]]
